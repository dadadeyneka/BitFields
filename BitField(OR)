#include <iostream>

using namespace std;

class BitField
{
  protected:
      long data;
  public:
  BitField();
  BitField(long newData);
  BitField(const BitField &x);
  ~BitField();
  long getData();
  void setData(long newData);
  friend BitField operator&(BitField & a, BitField & b); //and
  friend BitField operator|(BitField & a, BitField & b); //or
  BitField operator!(); //not
  friend BitField operator^(BitField & a, BitField & b); //xor
  void show();
  friend ostream& operator<<(ostream& os, BitField & a); //print to stream
  friend istream& operator>>(istream& os, BitField & a); //read from string 
  int getBit(int BitNumber);
  int setBit(int BitNumber, int bit);
}
long BitField::getData()
        {return data;}
        void BitField::setData(long newData)
        {data=newData;}
char BitField::getBit (int bitNumber)
{long z = data>>bitNumber;
  return z&1;}
BitField::BitField(long newData)
{ data=newData;}
BitField::BitField(const BitField &x)
{ata=x.data;}
BitField::BitField()
{data=0;}
BitField::~BitField()
{}
void BitField::show()
{for(int i=0; i<32; i++)
{cout<<(int) getBit(i);}}
BitField operator|(BitField &a, BitField &b)
{BitField c;
long x=a.getData();
long y=b.getData();
c.setData(x|y);
return c;}
